{
  "name": "jsrsasign",
  "version": "0.0.3",
  "description": "pure JavaScript cryptographic library(jsrsasign) and JSON Web Token (JWT) and JSON Web Signature (JWS) library (jsjws) bundle",
  "main": "lib/jsrsasign.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kjur/jsrsasign.git"
  },
  "keywords": [
    "RSA",
    "ECDSA",
    "DSA",
    "RSAPSS",
    "PKCS1",
    "PKCS5",
    "PKCS8",
    "hash function",
    "HMac",
    "ASN.1",
    "X.509",
    "Signature",
    "Message Digest",
    "signing",
    "certificate",
    "JSON Web Token",
    "JSON Web Signature",
    "JWT",
    "JWS",
    "JOSE",
    "JWA"
  ],
  "author": {
    "name": "Kenji Urushima"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/kjur/jsrsasign/master/LICENSE.txt"
    }
  ],
  "bugs": {
    "url": "https://github.com/kjur/jsrsasign/issues"
  },
  "dependencies": {},
  "readme": "jsrsasign\r\n=========\r\n\r\nThe 'jsrsasign' (RSA-Sign JavaScript Library) is an opensource free pure JavaScript cryptographic library supports RSA/RSAPSS/ECDSA/DSA signing/validation, ASN.1, PKCS#1/5/8 private/public key, X.509 certificate and CRL\r\n\r\nPublic page is http://kjur.github.com/jsrsasign .\r\n\r\nYour bugfix and pull request contribution are always welcomed :)\r\n\r\nDIFFERENCE WITH CRYPTO MODULE\r\n-----------------------------\r\n\r\nHere is the difference between bundled ['Crypto' module](http://nodejs.org/api/crypto.html) \r\nand this 'jsrsasign' module.\r\n\r\n- Crypto module\r\n    - fast\r\n    - works only on Node.js\r\n    - OpenSSL based\r\n    - lacking ASN.1 functionality\r\n    - provides symmetric ciphers\r\n    - lacking RSAPSS signing\r\n- jsrsasign module\r\n    - slow\r\n    - implemented in pure JavaScript\r\n    - works on both Node.js(server) and browsers(client)\r\n    - provides ASN.1 parsing/generation functionality\r\n    - lacking symmetric ciphers\r\n    - provides RSAPSS signing\r\n    - also provides support for JSON Web Signatures (JWS) and JSON Web Token (JWT)\r\n\r\nCONCLUDED THRIDPARTY LIBRARIES\r\n------------------------------\r\n\r\n- [CryptoJS](https://code.google.com/p/crypto-js/): for symmetric cipher, hash, mac, PBKDF (BSD License)\r\n- [BitCoinJS](http://bitcoinjs.org/): for ECDSA (MIT License)\r\n- [OpenPGP.js](http://openpgpjs.org/): for DSA (LGPL License)\r\n- [Tom Wu's jsbn](http://www-cs-students.stanford.edu/~tjw/jsbn/): for BigInteger, RSA encryption and EC (BSD License)\r\n- [Yahoo YUI](http://yuilibrary.com/): for class inheritance (BSD License)\r\n- [json-sans-eval](https://code.google.com/p/json-sans-eval/): secure JSON parser (Apache License)\r\n\r\nAVAILABLE CLASSES AND METHODS\r\n-----------------------------\r\n\r\nMost of the classes and methods defined in jsrsasign and jsjws are\r\navailable in this jsrsasign npm module.\r\n\r\nAfter loading the module,\r\n\r\n    > var r = require('jsrsasign');\r\n\r\nYou can refer name spaces, classes, methods and functions \r\nby following variables:\r\n\r\n- r.BigInteger - BigInteger class\r\n- r.RSAKey - [RSAKey class](http://kjur.github.io/jsrsasign/api/symbols/RSAKey.html)\r\n- r.ECDSA - [KJUR.crypto.ECDSA class](http://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.ECDSA.html)\r\n- r.DSA - [KJUR.crypto.DSA class](http://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.DSA.html)\r\n- r.Signature - [KJUR.crypto.Signature class](http://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Signature.html)\r\n- r.MessageDigest - [KJUR.crypto.MessageDigest class](http://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.MessageDigest.html)\r\n- r.Mac - [KJUR.crypto.Mac class](http://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Mac.html)\r\n- r.KEYUTIL - [KEYUTIL class](http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html)\r\n- r.ASN1HEX - [ASN1HEX class](http://kjur.github.io/jsrsasign/api/symbols/ASN1HEX.html)\r\n- r.crypto - [KJUR.crypto name space](http://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.html)\r\n- r.asn1 - [KJUR.asn1 name space](http://kjur.github.io/jsrsasign/api/symbols/KJUR.asn1.html)\r\n- r.jws - [KJUR.jws name space](http://kjur.github.io/jsjws/api/)\r\n\r\nPlease see API reference in the above links.\r\n\r\nEXAMPLE(1) SIGNATURE\r\n--------------------\r\n\r\nLoading encrypted PKCS#5 private key:\r\n\r\n    > var fs = require('fs');\r\n    > var pem = fs.readFileSync('z1.prv.p5e.pem', 'binary');\r\n    > var prvKey = a.KEYUTIL.getKey(pem, 'passwd');\r\n\r\nSign string 'aaa' with the loaded private key:\r\n\r\n    > var sig = new a.Signature({alg: 'SHA1withRSA'});\r\n    > sig.init(prvKey);\r\n    > sig.updateString('aaa');\r\n    > var sigVal = sig.sign();\r\n    > sigVal\r\n    'd764dcacb...'\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/kjur/jsrsasign",
  "_id": "jsrsasign@0.0.3",
  "_from": "jsrsasign@"
}
